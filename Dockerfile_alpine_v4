FROM alpine:3.21 as build

WORKDIR /var/www/html/

RUN echo "UTC" > /etc/timezone
RUN apk add --no-cache zip unzip curl sqlite nginx supervisor

RUN apk add bash
RUN sed -i 's/bin\/ash/bin\/bash/g' /etc/passwd

RUN apk add --no-cache php82 \
    php82-common \
    php82-fpm \
    php82-pdo \
    php82-opcache \
    php82-zip \
    php82-phar \
    php82-iconv \
    php82-cli \
    php82-curl \
    php82-openssl \
    php82-mbstring \
    php82-tokenizer \
    php82-fileinfo \
    php82-json \
    php82-xml \
    php82-xmlwriter \
    php82-simplexml \
    php82-dom \
    php82-pgsql \
    php82-pdo_pgsql \
    php82-pdo_sqlite \
    php82-tokenizer \
    php82-pecl-redis \
    && rm /etc/nginx/http.d/default.conf \
    && rm -rf /var/cache/apk/

RUN ln -s /usr/bin/php82 /usr/bin/php

RUN curl -sS https://getcomposer.org/installer -o composer-setup.php
RUN php composer-setup.php --install-dir=/usr/local/bin --filename=composer
RUN rm -rf composer-setup.php

RUN mkdir -p /etc/supervisor.d/
COPY ./docker/supervisord.ini /etc/supervisor.d/supervisord.ini

RUN mkdir -p /run/php/
RUN touch /run/php/php8.2-fpm.pid

COPY ./docker/php-fpm.conf /etc/php82/php-fpm.conf
COPY ./docker/php.ini-production /etc/php82/php.ini

COPY ./docker/nginx.conf /etc/nginx/
COPY ./docker/nginx-laravel.conf /etc/nginx/modules/

RUN mkdir -p /run/nginx/
RUN touch /run/nginx/nginx.pid

RUN ln -sf /dev/stdout /var/log/nginx/access.log
RUN ln -sf /dev/stderr /var/log/nginx/error.log

# Building process
# если UID не 1000 то права ставятся
RUN adduser -D vivek -u 1001
COPY ./html .

RUN chown -R vivek:vivek /var/www/html
RUN chown -R vivek:vivek /var/lib/nginx
RUN chown vivek:vivek /run/php/php8.2-fpm.pid
RUN chown vivek:vivek /run/nginx/nginx.pid
RUN chown vivek:vivek /var/lib/nginx/logs/error.log

#https://blog.container-solutions.com/understanding-volumes-docker

EXPOSE 80

COPY ./app_deploy.sh /var/www/app_deploy.sh
RUN ["chmod", "+x", "/var/www/app_deploy.sh"]
#USER vivek
#CMD [ "sh", "/var/www/app_deploy.sh" ]

FROM alpine:3.21 as production
RUN adduser -D vivek -u 1001
# --from=build: файлы будут скопированы из другого образа с именем "build". Этот образ должен быть определен ранее в Dockerfile.
# /var/www: Это путь к файлу или директории, которые нужно скопировать из образа "build".
COPY --from=build /var/www /var/www
USER vivek
CMD [ "sh", "/var/www/app_deploy.sh" ]